@page "/pokemon/create"
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager navigation

<h3>Create</h3>

@if(errorMessage != null)
{
        <h5 class="text-danger">@errorMessage</h5>
}

@if (types == null || moves == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

    <div class="container">
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Name</label>
                <InputText class="form-control" @bind-Value="model.Name" />
            </div>
            <div class="form-group">
                <label>Hp</label>
                <InputNumber class="form-control" @bind-Value="model.Hp" />
            </div>
            <label>Type</label>
            <InputSelect class="form-control" @bind-Value="model.TypeId">
                @foreach (var type in types)
                {
                    <option value="@type.Id">@type.Name</option>
                }
            </InputSelect>
            <label>Move one</label>
            <InputSelect class="form-control" @bind-Value="model.Move1Id">
                @foreach (var move in moves)
                {
                    <option value="@move.Id">@move.Name</option>
                }
            </InputSelect>
            <label>Move two</label>
            <InputSelect class="form-control" @bind-Value="model.Move2Id">
                @foreach (var move in moves)
                {
                    <option value="@move.Id">@move.Name</option>
                }
            </InputSelect>
            <label>Move three</label>
            <InputSelect class="form-control" @bind-Value="model.Move3Id">
                @foreach (var move in moves)
                {
                    <option value="@move.Id">@move.Name</option>
                }
            </InputSelect>
            <label>Move four</label>
            <InputSelect class="form-control" @bind-Value="model.Move4Id">
                @foreach (var move in moves)
                {
                    <option value="@move.Id">@move.Name</option>
                }
            </InputSelect>
            <hr />
            <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
        </EditForm>
    </div>
    }

@code {
    private PokemonCreate model = new();
    private IEnumerable<TypeListItem> types;
    private IEnumerable<MoveListItem> moves;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        types = await http.GetFromJsonAsync<IEnumerable<TypeListItem>>("/api/type/");
        moves = await http.GetFromJsonAsync<IEnumerable<MoveListItem>>("/api/move/");
    }

    private async void HandleSubmit()
    {
        var createdRes = await http.PostAsJsonAsync<PokemonCreate>("api/pokemon/", model);
        if (createdRes.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/pokemon");
        }
        else
    {
            errorMessage = "could not create your pokemon right now.  Please try again later.";
    }
    }
}

